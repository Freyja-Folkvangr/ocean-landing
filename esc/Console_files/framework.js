define(["angular/angular-animate","ui-router/angular-ui-router","language-remote/widgetsLanguage","app-remote/framework/directive/hwsDirective","app-remote/services/maskService","app-remote/services/httpService","app-remote/services/cookieService","app-remote/services/exceptionService","app-remote/framework/controllers/serviceCtrl","app-remote/framework/controllers/menusCtrl","app-remote/framework/services/frameworkService","app-remote/services/utilService","app/framework/configures/frameworkRouterConfig","app/business/home/services/homeService","app/business/home/configures/homeRouterConfig","app-remote/framework/directive/directiveFM","app/business/common/services/messageService","app/business/common/services/validatorService","app-remote/services/tipMsgService","app/business/common/services/widgetModelsService","app/business/common/services/commonService","app/business/common/services/cloudInfraService","app/business/common/services/sspCommonService","app/business/common/services/catalogService","app/business/common/services/scExceptionService","app/business/userCenter/configures/userCenterRouterConfig","app/business/tenantService/configures/serviceRouterConfig","app/business/taskCenter/configures/taskCenterRouterConfig","app/business/common/configures/commonRouterConfig","app/business/tenantOrg/configures/orgRouterConfig","app/business/vApp/configures/vAppRouterConfig","remote-lib/CryptoJS/hmac-sha256"],function(ngAnimate,router,widgetsLanguage,hws,mask,http,storage,exception,serviceCtrl,menusCtrl,frameworkServ,utilService,frameworkConfig,homeService,homeConfig,directiveFM,messageService,validatorService,tipMsgService,widgetModelsService,commonService,cloudInfraService,sspCommonService,catalogService,scExceptionService,userCenterRouterConfig,serviceRouterConfig,taskCenterRouterConfig,commonRouterConfig,orgRouterConfig,vAppRouterConfig){"use strict";var dependency,framework,$locale,locale;window.tinyLanguage||(window.tinyLanguage={});window.tinyLanguage.language=widgetsLanguage;dependency=["ng","wcc","ngAnimate","ui.router","hws",frameworkConfig.name,homeConfig.name,directiveFM.name,userCenterRouterConfig.name,serviceRouterConfig.name,taskCenterRouterConfig.name,commonRouterConfig.name,orgRouterConfig.name,vAppRouterConfig.name];framework=angular.module("framework",dependency);framework.value("globalRegionName","");framework.value("currentService","");framework.value("heartbeatInterval",3e5);framework.controller("serviceCtrl",serviceCtrl);framework.controller("menusCtrl",menusCtrl);framework.service("mask",mask);framework.service("camel",http);framework.service("exception",exception);framework.service("storage",storage);framework.service("frameworkService",frameworkServ);framework.service("utilService",utilService);framework.service("homeService",homeService);framework.service("messageService",messageService);framework.service("validator",validatorService);framework.service("tipMessage",tipMsgService);framework.service("widgetModelsService",widgetModelsService);framework.service("commonService",commonService);framework.service("cloudInfraService",cloudInfraService);framework.service("sspCommonService",sspCommonService);framework.service("catalogService",catalogService);framework.service("scException",scExceptionService);window.appWebPath="/console";window.global_endpoint_id="";window.app_cookie_prefix="";window.app_enable_framework_503=!1;framework.config(["$controllerProvider","$compileProvider","toggleSwitchConfigProvider",function($controllerProvider,$compileProvider,toggleSwitchConfigProvider){framework.controllerProvider=$controllerProvider;framework.compileProvider=$compileProvider;toggleSwitchConfigProvider.onLabel="  ";toggleSwitchConfigProvider.offLabel="  "}]);framework.run(["$rootScope","$timeout",function($rootScope,$timeout){$rootScope.$on("$stateChangeSuccess",function(event,toState){"function"==typeof ha&&$timeout(function(){ha("setAutoSendPV",!1);ha("set",{"url":location.href});ha("trackPageView",{"page_hierarchy":"c:{"+toState.name.replace(/\./g,"/")+"}"})},1)})}]);window.tinyWidget.UnifyValid.defaultTipPos="top";$locale=angular.injector(["ng"]).get("$locale");locale=$.extend(!0,$locale,widgetsLanguage.locale);angular.module("ngLocale").config(function($provide){$provide.value("$locale",locale)});return framework});